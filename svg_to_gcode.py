import sys
import configparser
from svgpathtools import svg2paths2, Path
import numpy as np

def load_config(config_file='config.ini'):
    config = configparser.ConfigParser()
    config.read(config_file)
    settings = config['Settings']
    pen_up_z = float(settings.get('pen_up_z', 5.0))
    pen_down_z = float(settings.get('pen_down_z', 0.0))
    x_offset = float(settings.get('x_offset', 0.0))
    y_offset = float(settings.get('y_offset', 0.0))
    z_offset = float(settings.get('z_offset', 0.0))
    feed_rate = float(settings.get('feed_rate', 1500))
    return pen_up_z, pen_down_z, x_offset, y_offset, z_offset, feed_rate

def extract_points_from_path(path, num_samples=100):
    points = []
    length = path.length(error=1e-5)
    if length == 0:
        return points
    for t in np.linspace(0, 1, num_samples):
        point = path.point(t)
        points.append((point.real, point.imag))
    return points

def svg_to_gcode(svg_file, gcode_file):
    pen_up_z, pen_down_z, x_offset, y_offset, z_offset, feed_rate = load_config()

    paths, attributes, svg_attributes = svg2paths2(svg_file)
    scale_factor = 1.0
    if 'width' in svg_attributes and 'height' in svg_attributes:
        if svg_attributes['width'][-2:] == 'mm' and svg_attributes['height'][-2:] == 'mm':
            width = float(svg_attributes['width'][:-2])
            height = float(svg_attributes['height'][:-2])
        else:
            # Assuming pixels, scale to millimeters (adjust if needed)
            width = float(svg_attributes['width'])
            height = float(svg_attributes['height'])
            dpi = 96  # Default SVG DPI
            scale_factor = 25.4 / dpi  # Convert pixels to mm
    else:
        width, height = 200, 200  # Default size in mm

    with open(gcode_file, 'w') as f:
        f.write('; Generated by svg_to_gcode.py\n')
        f.write('G21 ; Set units to millimeters\n')
        f.write('G90 ; Use absolute coordinates\n')
        f.write('G1 Z{:.2f} F{:.0f}\n'.format(pen_up_z + z_offset, feed_rate))  # Pen up

        for path in paths:
            points = extract_points_from_path(path)
            if not points:
                continue

            # Apply scaling and offsets
            points = [((x * scale_factor) + x_offset, (y * scale_factor) + y_offset) for x, y in points]

            # Move to the starting point
            x0, y0 = points[0]
            f.write('G1 X{:.3f} Y{:.3f} F{:.0f}\n'.format(x0, y0, feed_rate))
            f.write('G1 Z{:.2f} F{:.0f}\n'.format(pen_down_z + z_offset, feed_rate))  # Pen down

            # Draw the path
            for x, y in points[1:]:
                f.write('G1 X{:.3f} Y{:.3f} F{:.0f}\n'.format(x, y, feed_rate))

            # Pen up after finishing the path
            f.write('G1 Z{:.2f} F{:.0f}\n'.format(pen_up_z + z_offset, feed_rate))  # Pen up

    print(f'G-code successfully written to {gcode_file}')

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print('Usage: python svg_to_gcode.py input.svg output.gcode')
    else:
        svg_file = sys.argv[1]
        gcode_file = sys.argv[2]
        svg_to_gcode(svg_file, gcode_file)
